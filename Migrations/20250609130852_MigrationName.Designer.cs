// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SFCDashboardMobile.Data;

#nullable disable

namespace SFCDashboardMobile.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250609130852_MigrationName")]
    partial class MigrationName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SFCDashboardMobile.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PlannedEventId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlannedEventId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.PEIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHiddenFromInbox")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResolutionRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<string>("IssueText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OriginalIssueId")
                        .HasColumnType("int");

                    b.Property<int>("PETaskId")
                        .HasColumnType("int");

                    b.Property<int>("PlannedEventId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PEIssues");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.PEIssueResolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ConfirmationRequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.Property<int>("PlannedEventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResolutionDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("PlannedEventId");

                    b.ToTable("PEIssueResolutions");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.PERecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ACCESS_MEDIUM")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCESS_MEDIUM");

                    b.Property<string>("ACCESS_MEDIUM_A_END")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCESS_MEDIUM_A_END");

                    b.Property<string>("ACCESS_MEDIUM_B_END")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCESS_MEDIUM_B_END");

                    b.Property<string>("ACCOUNT_MANAGER")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCOUNT_MANAGER");

                    b.Property<string>("CCT_ID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CCT_ID");

                    b.Property<string>("CONTRACTOR_NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CONTRACTOR_NAME");

                    b.Property<string>("CRM_ORDER")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CRM_ORDER");

                    b.Property<string>("CUSTOMER")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CUSTOMER");

                    b.Property<string>("CUS_TYPE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CUS_TYPE");

                    b.Property<string>("FIBER_PE_NO")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIBER_PE_NO");

                    b.Property<string>("FIBER_PE_TASK_NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIBER_PE_TASK_NAME");

                    b.Property<string>("FIBER_PE_TASK_WG")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIBER_PE_TASK_WG");

                    b.Property<string>("FIBER_SO_ID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIBER_SO_ID");

                    b.Property<string>("JOB_REFERENCE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("JOB_REFERENCE");

                    b.Property<string>("LEA")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LEA");

                    b.Property<string>("LOCATION_A_ADDRESS")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LOCATION_A_ADDRESS");

                    b.Property<string>("LOCATION_B_ADDRESS")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LOCATION_B_ADDRESS");

                    b.Property<string>("NTU_TYPE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NTU_TYPE");

                    b.Property<string>("ORDER_TYPE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ORDER_TYPE");

                    b.Property<string>("PENDING_TASK_NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PENDING_TASK_NAME");

                    b.Property<string>("PENDING_WG")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PENDING_WG");

                    b.Property<string>("PE_ACTIVITY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PE_ACTIVITY");

                    b.Property<string>("PE_AREA")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PE_AREA");

                    b.Property<string>("PE_NATURE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PE_NATURE");

                    b.Property<string>("PE_NUMBER")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PE_NUMBER");

                    b.Property<string>("PE_OBJECTIVE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PE_OBJECTIVE");

                    b.Property<string>("PE_TITLE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PE_TITLE");

                    b.Property<string>("PE_WO_COMMENTS")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PE_WO_COMMENTS");

                    b.Property<string>("PRODUCT_SO_ID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PRODUCT_SO_ID");

                    b.Property<string>("PROVINCE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PROVINCE");

                    b.Property<string>("PROVINCE_1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PROVINCE_1");

                    b.Property<string>("REGION")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("REGION");

                    b.Property<string>("REGION_1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("REGION_1");

                    b.Property<string>("REQUEST_REFERENCE_NO")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("REQUEST_REFERENCE_NO");

                    b.Property<string>("RTOM")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RTOM");

                    b.Property<string>("RTOM_1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RTOM_1");

                    b.Property<string>("RTOM_DESCRIPTION")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RTOM_DESCRIPTION");

                    b.Property<string>("SECTION_HANDLED_BY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SECTION_HANDLED_BY");

                    b.Property<string>("SERVICE_CATEGORY")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SERVICE_CATEGORY");

                    b.Property<DateTime?>("SERVICE_REQUIRED_DATE")
                        .HasColumnType("datetime2")
                        .HasColumnName("SERVICE_REQUIRED_DATE");

                    b.Property<string>("SERVICE_SPEED")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SERVICE_SPEED");

                    b.Property<string>("SERVICE_TYPE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SERVICE_TYPE");

                    b.Property<DateTime?>("SO_CREATE_DATE")
                        .HasColumnType("datetime2")
                        .HasColumnName("SO_CREATE_DATE");

                    b.Property<string>("SO_ID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SO_ID");

                    b.Property<string>("SO_NUMBER")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SO_NUMBER");

                    b.Property<string>("TASK_NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TASK_NAME");

                    b.Property<int?>("TASK_SEQ")
                        .HasColumnType("int")
                        .HasColumnName("TASK_SEQ");

                    b.Property<string>("TASK_WG")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TASK_WG");

                    b.Property<string>("WO_ACTUAL_START_DATE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WO_ACTUAL_START_DATE");

                    b.Property<string>("WO_COMMENTS")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WO_COMMENTS");

                    b.Property<string>("WO_ID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WO_ID");

                    b.Property<DateTime?>("WO_START_DATE")
                        .HasColumnType("datetime2")
                        .HasColumnName("WO_START_DATE");

                    b.Property<string>("WO_STATUS")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WO_STATUS");

                    b.HasKey("ID");

                    b.ToTable("PERecords", (string)null);
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.PETask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ACtualTaskCompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualTaskCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstimatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOLAViolate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<string>("OLA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PENumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Task")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TaskCompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TaskCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TaskSeq")
                        .HasColumnType("int");

                    b.Property<string>("TaskStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskWorkGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UrgentRequested")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PENumber");

                    b.ToTable("PETasks");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.PETaskList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OLA_Parameters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskSeq")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PETaskList");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Can manage estimated time for tasks",
                            Name = "CanManageEstimatedTime"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Can send \"Planned Event\" urgent requests",
                            Name = "CanSendPEUrgentRequests"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Can view and accept Planned Event urgent requests",
                            Name = "CanAcceptUrgentRequests"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Can mark a \"Task\" of a specific PE as Urgent",
                            Name = "CanMakeTasksUrgent"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Admin permissions",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.PlannedEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessMedium")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCESS_MEDIUM");

                    b.Property<string>("AccessMediumAEnd")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCESS_MEDIUM_A_END");

                    b.Property<string>("AccessMediumBEnd")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCESS_MEDIUM_B_END");

                    b.Property<string>("AccountManager")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCOUNT_MANAGER");

                    b.Property<string>("CctId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CCT_ID");

                    b.Property<string>("ContractorName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CONTRACTOR_NAME");

                    b.Property<string>("CrmOrder")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CRM_ORDER");

                    b.Property<string>("CusType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CUS_TYPE");

                    b.Property<string>("Customer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CUSTOMER");

                    b.Property<string>("FiberPeNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIBER_PE_NO");

                    b.Property<string>("FiberPeTaskName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIBER_PE_TASK_NAME");

                    b.Property<string>("FiberPeTaskWg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIBER_PE_TASK_WG");

                    b.Property<string>("FiberSoId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FIBER_SO_ID");

                    b.Property<bool>("IsHold")
                        .HasColumnType("bit");

                    b.Property<string>("IssueText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobReference")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("JOB_REFERENCE");

                    b.Property<string>("Lea")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LEA");

                    b.Property<string>("LocationAAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LOCATION_A_ADDRESS");

                    b.Property<string>("LocationBAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LOCATION_B_ADDRESS");

                    b.Property<string>("NtuType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NTU_TYPE");

                    b.Property<string>("OrderType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ORDER_TYPE");

                    b.Property<DateTime>("PECreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("PE_CREATED_DATE");

                    b.Property<string>("PEStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PE_STATUS");

                    b.Property<string>("PeActivity")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PE_ACTIVITY");

                    b.Property<string>("PeArea")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PE_AREA");

                    b.Property<string>("PeNature")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PE_NATURE");

                    b.Property<string>("PeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PE_NUMBER");

                    b.Property<string>("PeObjective")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PE_OBJECTIVE");

                    b.Property<string>("PeTitle")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PE_TITLE");

                    b.Property<string>("PeWoComments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PE_WO_COMMENTS");

                    b.Property<string>("PendingTaskName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PENDING_TASK_NAME");

                    b.Property<string>("PendingWg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PENDING_WG");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PRIORITY");

                    b.Property<string>("ProductSoId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PRODUCT_SO_ID");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PROVINCE");

                    b.Property<string>("Province1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PROVINCE_1");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("REGION");

                    b.Property<string>("Region1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("REGION_1");

                    b.Property<string>("RequestReferenceNo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("REQUEST_REFERENCE_NO");

                    b.Property<string>("Rtom")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RTOM");

                    b.Property<string>("Rtom1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RTOM_1");

                    b.Property<string>("RtomDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RTOM_DESCRIPTION");

                    b.Property<string>("SectionHandledBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SECTION_HANDLED_BY");

                    b.Property<string>("ServiceCategory")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SERVICE_CATEGORY");

                    b.Property<DateTime?>("ServiceRequiredDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("SERVICE_REQUIRED_DATE");

                    b.Property<string>("ServiceSpeed")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SERVICE_SPEED");

                    b.Property<string>("ServiceType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SERVICE_TYPE");

                    b.Property<DateTime?>("SoCreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("SO_CREATE_DATE");

                    b.Property<string>("SoId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SO_ID");

                    b.Property<string>("SoNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SO_NUMBER");

                    b.Property<int?>("SystemUserId")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TASK_NAME");

                    b.Property<int?>("TaskSeq")
                        .HasColumnType("int")
                        .HasColumnName("TASK_SEQ");

                    b.Property<string>("TaskWg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TASK_WG");

                    b.Property<string>("WoActualStartDate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WO_ACTUAL_START_DATE");

                    b.Property<string>("WoComments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WO_COMMENTS");

                    b.Property<string>("WoId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WO_ID");

                    b.Property<DateTime?>("WoStartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("WO_START_DATE");

                    b.Property<string>("WoStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WO_STATUS");

                    b.Property<int?>("WorkGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SystemUserId");

                    b.HasIndex("WorkGroupId");

                    b.ToTable("PlannedEvents");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.SubTaskList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastReported")
                        .HasColumnType("datetime2");

                    b.Property<int>("PETaskListId")
                        .HasColumnType("int");

                    b.Property<string>("SubTaskName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("PETaskListId");

                    b.ToTable("SubTaskLists");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.TaskEscalation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EscalatedToUserId")
                        .HasColumnType("int");

                    b.Property<string>("EscalationReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EscalationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<int>("PlannedEventId")
                        .HasColumnType("int");

                    b.Property<string>("ResolutionComments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ResolvedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EscalatedToUserId");

                    b.HasIndex("PlannedEventId");

                    b.ToTable("TaskEscalations");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.TaskEstimationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EstimatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskEstimationHistory");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.TaskExtensionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Justification")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PlannedEventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestedById")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("RequestedExtension")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("PlannedEventId");

                    b.HasIndex("RequestedById");

                    b.ToTable("TaskExtensionRequests");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.TaskHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NewStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PlannedEventId")
                        .HasColumnType("int");

                    b.Property<string>("PreviousStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlannedEventId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskHistories");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.UrgentReason", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("PERecordID")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("PERecordID");

                    b.ToTable("UrgentReasons");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.WorkGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WorkGroups");
                });

            modelBuilder.Entity("SystemUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.HasIndex("WorkGroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.Notification", b =>
                {
                    b.HasOne("SFCDashboardMobile.Models.PlannedEvent", "PlannedEvent")
                        .WithMany()
                        .HasForeignKey("PlannedEventId");

                    b.HasOne("SystemUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("PlannedEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.PEIssueResolution", b =>
                {
                    b.HasOne("SFCDashboardMobile.Models.PEIssue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFCDashboardMobile.Models.PlannedEvent", "PlannedEvent")
                        .WithMany()
                        .HasForeignKey("PlannedEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("PlannedEvent");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.PETask", b =>
                {
                    b.HasOne("SFCDashboardMobile.Models.PlannedEvent", "PlannedEvent")
                        .WithMany()
                        .HasForeignKey("PENumber")
                        .HasPrincipalKey("PeNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlannedEvent");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.PlannedEvent", b =>
                {
                    b.HasOne("SystemUser", null)
                        .WithMany("AssignedEvents")
                        .HasForeignKey("SystemUserId");

                    b.HasOne("SFCDashboardMobile.Models.WorkGroup", null)
                        .WithMany("AssignedEvents")
                        .HasForeignKey("WorkGroupId");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.RolePermission", b =>
                {
                    b.HasOne("SFCDashboardMobile.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFCDashboardMobile.Models.UserRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.SubTaskList", b =>
                {
                    b.HasOne("SFCDashboardMobile.Models.PETaskList", "PETaskList")
                        .WithMany()
                        .HasForeignKey("PETaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PETaskList");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.TaskEscalation", b =>
                {
                    b.HasOne("SystemUser", "EscalatedTo")
                        .WithMany()
                        .HasForeignKey("EscalatedToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFCDashboardMobile.Models.PlannedEvent", "PlannedEvent")
                        .WithMany()
                        .HasForeignKey("PlannedEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EscalatedTo");

                    b.Navigation("PlannedEvent");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.TaskEstimationHistory", b =>
                {
                    b.HasOne("SFCDashboardMobile.Models.PETask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.TaskExtensionRequest", b =>
                {
                    b.HasOne("SystemUser", "ApprovedBy")
                        .WithMany("ApprovedExtensions")
                        .HasForeignKey("ApprovedById");

                    b.HasOne("SFCDashboardMobile.Models.PlannedEvent", "PlannedEvent")
                        .WithMany()
                        .HasForeignKey("PlannedEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemUser", "RequestedBy")
                        .WithMany("RequestedExtensions")
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("PlannedEvent");

                    b.Navigation("RequestedBy");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.TaskHistory", b =>
                {
                    b.HasOne("SFCDashboardMobile.Models.PlannedEvent", "PlannedEvent")
                        .WithMany()
                        .HasForeignKey("PlannedEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemUser", "ChangedBy")
                        .WithMany("TaskChanges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedBy");

                    b.Navigation("PlannedEvent");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.UrgentReason", b =>
                {
                    b.HasOne("SFCDashboardMobile.Models.PERecord", "PERecord")
                        .WithMany()
                        .HasForeignKey("PERecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PERecord");
                });

            modelBuilder.Entity("SystemUser", b =>
                {
                    b.HasOne("SFCDashboardMobile.Models.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.HasOne("SFCDashboardMobile.Models.WorkGroup", "WorkGroup")
                        .WithMany("Users")
                        .HasForeignKey("WorkGroupId");

                    b.Navigation("UserRole");

                    b.Navigation("WorkGroup");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.UserRole", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("SFCDashboardMobile.Models.WorkGroup", b =>
                {
                    b.Navigation("AssignedEvents");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SystemUser", b =>
                {
                    b.Navigation("ApprovedExtensions");

                    b.Navigation("AssignedEvents");

                    b.Navigation("RequestedExtensions");

                    b.Navigation("TaskChanges");
                });
#pragma warning restore 612, 618
        }
    }
}
